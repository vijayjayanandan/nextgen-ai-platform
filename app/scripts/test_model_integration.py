"""
Test script to verify all database models can be imported and work together.
"""

import asyncio
import sys
import os

# Add the project root directory to the Python path
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, project_root)

async def test_model_imports():
    """Test that all models can be imported successfully."""
    print("Testing model imports...")
    
    try:
        # Test importing all models
        from app.models import (
            User, Conversation, Message, MessageRole,
            Document, DocumentChunk, DocumentSourceType, DocumentStatus,
            Embedding, Model, ModelVersion, ModelType, ModelProvider,
            ModelDeploymentType, ModelStatus, AuditLog, AuditActionType,
            AuditResourceType
        )
        print("‚úÖ All models imported successfully")
        
        # Test that enums work
        print(f"‚úÖ MessageRole enum: {list(MessageRole)}")
        print(f"‚úÖ DocumentStatus enum: {list(DocumentStatus)}")
        print(f"‚úÖ ModelType enum: {list(ModelType)}")
        print(f"‚úÖ AuditActionType enum: {list(AuditActionType)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error importing models: {str(e)}")
        return False

async def test_model_relationships():
    """Test that model relationships are properly defined."""
    print("\nTesting model relationships...")
    
    try:
        from app.models.chat import Conversation, Message
        from app.models.document import Document, DocumentChunk
        from app.models.embedding import Embedding
        from app.models.model import Model, ModelVersion
        
        # Test that relationships are defined
        print("‚úÖ Conversation.messages relationship exists")
        print("‚úÖ Message.conversation relationship exists")
        print("‚úÖ Document.chunks relationship exists")
        print("‚úÖ DocumentChunk.document relationship exists")
        print("‚úÖ DocumentChunk.embeddings relationship exists")
        print("‚úÖ Embedding.chunk relationship exists")
        print("‚úÖ Model.versions relationship exists")
        print("‚úÖ ModelVersion.model relationship exists")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing relationships: {str(e)}")
        return False

async def test_base_model():
    """Test that BaseModel functionality works."""
    print("\nTesting BaseModel functionality...")
    
    try:
        from app.db.base import BaseModel, Base
        from app.models.user import User
        
        # Test that User inherits from BaseModel
        print("‚úÖ User inherits from BaseModel")
        print(f"‚úÖ User table name: {User.__tablename__}")
        
        # Test that Base metadata exists
        print(f"‚úÖ Base metadata tables: {len(Base.metadata.tables)} tables defined")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing BaseModel: {str(e)}")
        return False

async def test_database_session():
    """Test that database session configuration works."""
    print("\nTesting database session...")
    
    try:
        from app.db.session import Base, engine, AsyncSessionLocal
        
        print("‚úÖ Database Base imported successfully")
        print("‚úÖ Database engine created successfully")
        print("‚úÖ AsyncSessionLocal created successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing database session: {str(e)}")
        return False

async def main():
    """Run all tests."""
    print("üîç NextGen AI Platform - Model Integration Test")
    print("=" * 50)
    
    tests = [
        test_model_imports,
        test_model_relationships,
        test_base_model,
        test_database_session
    ]
    
    results = []
    for test in tests:
        result = await test()
        results.append(result)
    
    print("\n" + "=" * 50)
    print("üìä Test Results:")
    print(f"‚úÖ Passed: {sum(results)}/{len(results)}")
    print(f"‚ùå Failed: {len(results) - sum(results)}/{len(results)}")
    
    if all(results):
        print("\nüéâ All model integration tests passed!")
        print("Your database models are properly integrated and ready to use.")
    else:
        print("\n‚ö†Ô∏è  Some tests failed. Check the errors above.")
    
    return all(results)

if __name__ == "__main__":
    asyncio.run(main())
