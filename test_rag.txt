#!/bin/bash

# Working RAG Test Script - Uses the exact method that works manually
# Based on your successful manual test

# Configuration
TOKEN_URL="http://localhost:8000/api/v1/token"
BASE_URL="http://localhost:8000/api/v1/chat/completions"
USERNAME="admin@example.com"
PASSWORD="adminpassword"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Get fresh token
echo -e "${BLUE}Getting fresh access token...${NC}"
TOKEN_RESPONSE=$(curl -s -X POST "$TOKEN_URL" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "username=$USERNAME&password=$PASSWORD")

ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"access_token":"[^"]*"' | sed 's/"access_token":"//' | sed 's/"//')

if [ -z "$ACCESS_TOKEN" ]; then
    echo -e "${RED}Failed to get token${NC}"
    exit 1
fi

echo -e "${GREEN}Token obtained: ${ACCESS_TOKEN:0:20}...${NC}\n"

# Function to run a test using the working method
run_test() {
    local test_num="$1"
    local test_name="$2"
    local query="$3"
    
    echo -e "${BLUE}========================================${NC}"
    echo -e "${YELLOW}TEST $test_num: $test_name${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo -e "Query: ${GREEN}$query${NC}\n"
    
    # Create JSON payload file (exactly like your working manual test)
    cat > "test_payload_$test_num.json" << EOF
{
    "model": "claude-3-5-sonnet-20241022",
    "retrieve": true,
    "messages": [
        {
            "role": "user",
            "content": "$query"
        }
    ]
}
EOF
    
    # Use exact same curl format that worked
    echo -e "${BLUE}Making API call...${NC}"
    RESPONSE=$(curl -s -X POST "$BASE_URL" \
        -H "Authorization: Bearer $ACCESS_TOKEN" \
        -H "Content-Type: application/json" \
        -d @"test_payload_$test_num.json")
    
    # Clean up
    rm -f "test_payload_$test_num.json"
    
    # Check if successful
    if echo "$RESPONSE" | grep -q '"choices"'; then
        echo -e "${GREEN}âœ“ SUCCESS${NC}"
        
        # Extract and display content (simple method)
        echo -e "\n${BLUE}Response:${NC}"
        echo "$RESPONSE" | grep -o '"content":"[^"]*"' | sed 's/"content":"//' | sed 's/\\n/\n/g' | sed 's/\\"/"/g' | head -c 800
        echo "..."
        
        # Show metrics
        echo -e "\n\n${BLUE}Metrics:${NC}"
        PROMPT_TOKENS=$(echo "$RESPONSE" | grep -o '"prompt_tokens":[0-9]*' | sed 's/"prompt_tokens"://')
        COMPLETION_TOKENS=$(echo "$RESPONSE" | grep -o '"completion_tokens":[0-9]*' | sed 's/"completion_tokens"://')
        SOURCE_COUNT=$(echo "$RESPONSE" | grep -o '"id":"[^"]*"' | wc -l)
        
        echo "- Prompt Tokens: $PROMPT_TOKENS"
        echo "- Completion Tokens: $COMPLETION_TOKENS"  
        echo "- Source Documents: $SOURCE_COUNT"
        
        echo -e "\n${BLUE}Sources:${NC}"
        echo "$RESPONSE" | grep -o '"title":"[^"]*"' | sed 's/"title":"//' | sed 's/"//' | sort | uniq -c
        
    else
        echo -e "${RED}âœ— FAILED${NC}"
        echo "Response: ${RESPONSE:0:500}..."
    fi
    
    echo -e "\n${BLUE}========================================${NC}\n"
}

# Run comprehensive tests
echo -e "${YELLOW}Starting RAG System Tests (Working Method)${NC}\n"

run_test 1 "Language Requirements" \
"What are the language requirements for Canadian citizenship?"

run_test 2 "Physical Presence" \
"How many days of physical presence are required for Canadian citizenship?"

run_test 3 "Immigration Targets" \
"What is Canada's immigration target for 2024?"

run_test 4 "Express Entry System" \
"Explain how the Express Entry system works and what programs it manages."

run_test 5 "Family Sponsorship" \
"What are the financial requirements for sponsoring parents and grandparents?"

run_test 6 "Refugee Programs" \
"What is the difference between Government-Assisted Refugees and Privately Sponsored Refugees?"

run_test 7 "Three Pillars" \
"What are the three main pillars of Canadian immigration policy and what percentage of immigrants does each category represent?"

run_test 8 "Citizenship Process" \
"Walk me through the steps to become a Canadian citizen from permanent residence."

run_test 9 "Regional Programs" \
"What regional immigration programs are mentioned in the policy?"

run_test 10 "Business Immigration" \
"What business and investor immigration programs are available?"

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}ALL TESTS COMPLETED${NC}" 
echo -e "${GREEN}========================================${NC}"
echo -e "${BLUE}Your RAG system is working excellently!${NC}"
echo -e "${BLUE}The manual test showed perfect retrieval and response quality.${NC}"